// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartMenu.DAO;

#nullable disable

namespace SmartMenu.DAO.Migrations
{
    [DbContext(typeof(SmartMenuDBContext))]
    [Migration("20240516173230_AddLayerBox")]
    partial class AddLayerBox
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SmartMenu.Domain.Models.Box", b =>
                {
                    b.Property<int>("BoxID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BoxID"), 1L, 1);

                    b.Property<string>("BoxColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BoxContentID")
                        .HasColumnType("int");

                    b.Property<int>("BoxMaxCapacity")
                        .HasColumnType("int");

                    b.Property<double>("BoxPositionX")
                        .HasColumnType("float");

                    b.Property<double>("BoxPositionY")
                        .HasColumnType("float");

                    b.Property<int>("BoxType")
                        .HasColumnType("int");

                    b.Property<int>("FontID")
                        .HasColumnType("int");

                    b.Property<double>("FontSize")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LayerID")
                        .HasColumnType("int");

                    b.HasKey("BoxID");

                    b.HasIndex("BoxContentID");

                    b.HasIndex("FontID");

                    b.HasIndex("LayerID");

                    b.ToTable("Boxes");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.BoxContent", b =>
                {
                    b.Property<int>("BoxContentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BoxContentID"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BoxContentID");

                    b.ToTable("BoxContent");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Brand", b =>
                {
                    b.Property<int>("BrandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandID"), 1L, 1);

                    b.Property<string>("BrandContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("BrandID");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.BrandStaff", b =>
                {
                    b.Property<int>("BrandStaffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandStaffID"), 1L, 1);

                    b.Property<int>("BrandID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BrandStaffID");

                    b.HasIndex("BrandID");

                    b.HasIndex("UserID");

                    b.ToTable("BrandStaffs");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Collection", b =>
                {
                    b.Property<int>("CollectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectionID"), 1L, 1);

                    b.Property<int>("BrandID")
                        .HasColumnType("int");

                    b.Property<string>("CollectionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CollectionID");

                    b.HasIndex("BrandID");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Font", b =>
                {
                    b.Property<int>("FontID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FontID"), 1L, 1);

                    b.Property<string>("FontName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("FontID");

                    b.ToTable("Fonts");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Layer", b =>
                {
                    b.Property<int>("LayerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LayerID"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemplateID")
                        .HasColumnType("int");

                    b.HasKey("LayerID");

                    b.HasIndex("TemplateID");

                    b.ToTable("Layers");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.LayerItem", b =>
                {
                    b.Property<int>("LayerItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LayerItemID"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LayerID")
                        .HasColumnType("int");

                    b.Property<int>("LayerItemType")
                        .HasColumnType("int");

                    b.Property<string>("LayerItemValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LayerItemID");

                    b.HasIndex("LayerID");

                    b.ToTable("LayersItem");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Menu", b =>
                {
                    b.Property<int>("MenuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuID"), 1L, 1);

                    b.Property<int>("BrandID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MenuDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MenuID");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"), 1L, 1);

                    b.Property<int>("BrandID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.HasKey("ProductID");

                    b.HasIndex("BrandID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.ProductGroup", b =>
                {
                    b.Property<int>("ProductGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductGroupID"), 1L, 1);

                    b.Property<int>("CollectionID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MenuID")
                        .HasColumnType("int");

                    b.Property<int>("ProductGroupMaxCapacity")
                        .HasColumnType("int");

                    b.Property<string>("ProductGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductGroupID");

                    b.HasIndex("CollectionID");

                    b.HasIndex("MenuID");

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.ProductGroupItem", b =>
                {
                    b.Property<int>("ProductGroupItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductGroupItemID"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductGroupID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("ProductGroupItemID");

                    b.HasIndex("ProductGroupID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductGroupsItem");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Store", b =>
                {
                    b.Property<int>("StoreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreID"), 1L, 1);

                    b.Property<int>("BrandID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("StoreContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreID");

                    b.HasIndex("BrandID");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.StoreCollection", b =>
                {
                    b.Property<int>("StoreCollectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreCollectionID"), 1L, 1);

                    b.Property<int>("CollectionID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("StoreID")
                        .HasColumnType("int");

                    b.HasKey("StoreCollectionID");

                    b.HasIndex("CollectionID");

                    b.HasIndex("StoreID");

                    b.ToTable("StoreCollections");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.StoreMenu", b =>
                {
                    b.Property<int>("StoreMenuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreMenuID"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MenuID")
                        .HasColumnType("int");

                    b.Property<int>("StoreID")
                        .HasColumnType("int");

                    b.HasKey("StoreMenuID");

                    b.HasIndex("MenuID");

                    b.HasIndex("StoreID");

                    b.ToTable("StoreMenus");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Template", b =>
                {
                    b.Property<int>("TemplateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemplateID"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TemplateDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TemplateID");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Box", b =>
                {
                    b.HasOne("SmartMenu.Domain.Models.BoxContent", "BoxContent")
                        .WithMany()
                        .HasForeignKey("BoxContentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMenu.Domain.Models.Font", "Font")
                        .WithMany()
                        .HasForeignKey("FontID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMenu.Domain.Models.Layer", "Layer")
                        .WithMany("Boxes")
                        .HasForeignKey("LayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoxContent");

                    b.Navigation("Font");

                    b.Navigation("Layer");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.BrandStaff", b =>
                {
                    b.HasOne("SmartMenu.Domain.Models.Brand", null)
                        .WithMany("BrandStaffs")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMenu.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Collection", b =>
                {
                    b.HasOne("SmartMenu.Domain.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Layer", b =>
                {
                    b.HasOne("SmartMenu.Domain.Models.Template", "Template")
                        .WithMany("Layers")
                        .HasForeignKey("TemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.LayerItem", b =>
                {
                    b.HasOne("SmartMenu.Domain.Models.Layer", "Layer")
                        .WithMany("LayerItems")
                        .HasForeignKey("LayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Layer");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Product", b =>
                {
                    b.HasOne("SmartMenu.Domain.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMenu.Domain.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.ProductGroup", b =>
                {
                    b.HasOne("SmartMenu.Domain.Models.Collection", "Collection")
                        .WithMany("ProductGroups")
                        .HasForeignKey("CollectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMenu.Domain.Models.Menu", "Menu")
                        .WithMany("ProductGroups")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.ProductGroupItem", b =>
                {
                    b.HasOne("SmartMenu.Domain.Models.ProductGroup", "ProductGroup")
                        .WithMany("ProductGroupItems")
                        .HasForeignKey("ProductGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMenu.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Store", b =>
                {
                    b.HasOne("SmartMenu.Domain.Models.Brand", null)
                        .WithMany("Stores")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.StoreCollection", b =>
                {
                    b.HasOne("SmartMenu.Domain.Models.Collection", "Collection")
                        .WithMany()
                        .HasForeignKey("CollectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMenu.Domain.Models.Store", null)
                        .WithMany("StoreCollections")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.StoreMenu", b =>
                {
                    b.HasOne("SmartMenu.Domain.Models.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMenu.Domain.Models.Store", null)
                        .WithMany("StoreMenus")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.User", b =>
                {
                    b.HasOne("SmartMenu.Domain.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Brand", b =>
                {
                    b.Navigation("BrandStaffs");

                    b.Navigation("Products");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Collection", b =>
                {
                    b.Navigation("ProductGroups");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Layer", b =>
                {
                    b.Navigation("Boxes");

                    b.Navigation("LayerItems");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Menu", b =>
                {
                    b.Navigation("ProductGroups");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.ProductGroup", b =>
                {
                    b.Navigation("ProductGroupItems");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Store", b =>
                {
                    b.Navigation("StoreCollections");

                    b.Navigation("StoreMenus");
                });

            modelBuilder.Entity("SmartMenu.Domain.Models.Template", b =>
                {
                    b.Navigation("Layers");
                });
#pragma warning restore 612, 618
        }
    }
}
